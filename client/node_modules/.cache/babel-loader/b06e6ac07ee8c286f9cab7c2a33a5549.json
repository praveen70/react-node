{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport Script from 'react-load-script';\nimport cleanProps from 'clean-react-props';\nvar EXCLUDE_PROPS = ['onClick', 'onDoubleClick', 'onDrag', 'onDragEnd', 'onDragStart', 'onMouseMove', 'onMouseOut', 'onMouseOver'];\nvar CALLBACK_MAP = {\n  'bounds_changed': 'onBoundsChange',\n  'center_changed': 'onCenterChange',\n  'click': 'onClick',\n  'dblclick': 'onDoubleClick',\n  'drag': 'onDrag',\n  'dragend': 'onDragEnd',\n  'dragstart': 'onDragStart',\n  'heading_changed': 'onHeadingChange',\n  'idle': 'onIdle',\n  'maptypeid_change': 'onMapTypeIdChange',\n  'mousemove': 'onMouseMove',\n  'mouseout': 'onMouseOut',\n  'mouseover': 'onMouseOver',\n  'projection_changed': 'onProjectionChange',\n  'rightclick': 'onRightClick',\n  'tilesloaded': 'onTilesLoad',\n  'tilt_changed': 'onTiltChange',\n  'zoom_changed': 'onZoomChange'\n};\nwindow['reactMapsGoogleInstances'] = [];\n\nwindow['reactMapsGoogleInit'] = function () {\n  window['reactMapsGoogleInstances'].forEach(function (instance) {\n    return instance();\n  });\n};\n\nvar GoogleMap = function (_Component) {\n  _inherits(GoogleMap, _Component);\n\n  function GoogleMap(props) {\n    _classCallCheck(this, GoogleMap);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    var scriptLoaded = window.google && window.google.maps && window.google.maps.Map ? true : false;\n    _this.state = {\n      map: null,\n      scriptLoaded: scriptLoaded\n    };\n    _this.onScriptLoad = _this.onScriptLoad.bind(_this);\n    _this.onScriptInit = _this.onScriptInit.bind(_this);\n    window['reactMapsGoogleInstances'].push(_this.onScriptInit);\n    return _this;\n  }\n\n  GoogleMap.prototype.componentDidMount = function componentDidMount() {\n    this.renderMap();\n  };\n\n  GoogleMap.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    this.refreshMapSettings(nextProps);\n  };\n\n  GoogleMap.prototype.componentWillUnmount = function componentWillUnmount() {\n    var map = this.state.map;\n\n    if (!map) {\n      return;\n    }\n\n    google.maps.event.clearInstanceListeners(map);\n  };\n\n  GoogleMap.prototype.refreshMapSettings = function refreshMapSettings(props) {\n    var map = this.state.map;\n\n    if (!map) {\n      return;\n    }\n\n    var options = props.options;\n    map.setOptions(options);\n  };\n\n  GoogleMap.prototype.onScriptLoad = function onScriptLoad() {\n    this.setState({\n      scriptLoaded: true\n    });\n  };\n\n  GoogleMap.prototype.onScriptInit = function onScriptInit() {\n    this.renderMap();\n  };\n\n  GoogleMap.prototype.onMapCallback = function onMapCallback(callback, event) {\n    var map = this.state.map;\n    this.props[callback](map, event);\n  };\n\n  GoogleMap.prototype.renderMap = function renderMap() {\n    var _this2 = this;\n\n    if (this.state.map) {\n      return false;\n    }\n\n    if (!window.google || !window.google.maps || !window.google.maps.Map) {\n      return false;\n    }\n\n    var _props = this.props,\n        options = _props.options,\n        onReady = _props.onReady;\n    var mapElement = ReactDOM.findDOMNode(this.mapRef);\n\n    if (!mapElement) {\n      return false;\n    }\n\n    var map = new google.maps.Map(mapElement, options);\n    Object.keys(CALLBACK_MAP).forEach(function (key) {\n      google.maps.event.addListener(map, key, _this2.onMapCallback.bind(_this2, CALLBACK_MAP[key]));\n    });\n    this.setState({\n      map: map\n    });\n    onReady(map);\n    return true;\n  };\n\n  GoogleMap.prototype.render = function render() {\n    var _this3 = this;\n\n    var _props2 = this.props,\n        apiKey = _props2.apiKey,\n        children = _props2.children;\n    var _state = this.state,\n        map = _state.map,\n        scriptLoaded = _state.scriptLoaded;\n    var clonedChildren = React.Children.toArray(children).map(function (child) {\n      return React.cloneElement(child, {\n        map: map\n      });\n    });\n    return React.createElement(React.Fragment, null, scriptLoaded === false && React.createElement(Script, {\n      url: 'https://maps.googleapis.com/maps/api/js?key=' + apiKey + '&callback=reactMapsGoogleInit',\n      onLoad: this.onScriptLoad\n    }), React.createElement('div', _extends({}, cleanProps(this.props, EXCLUDE_PROPS), {\n      ref: function ref(element) {\n        return _this3.mapRef = element;\n      },\n      style: {\n        height: '100%'\n      }\n    })), clonedChildren);\n  };\n\n  return GoogleMap;\n}(Component);\n\nGoogleMap.propTypes = {\n  apiKey: PropTypes.string.isRequired,\n  options: PropTypes.object,\n  onBoundsChange: PropTypes.func,\n  onCenterChange: PropTypes.func,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onDrag: PropTypes.func,\n  onDragEnd: PropTypes.func,\n  onDragStart: PropTypes.func,\n  onHeadingChange: PropTypes.func,\n  onIdle: PropTypes.func,\n  onMapTypeIdChange: PropTypes.func,\n  onMouseMove: PropTypes.func,\n  onMouseOut: PropTypes.func,\n  onMouseOver: PropTypes.func,\n  onProjectionChange: PropTypes.func,\n  onRightClick: PropTypes.func,\n  onTilesLoad: PropTypes.func,\n  onTiltChange: PropTypes.func,\n  onZoomChange: PropTypes.func,\n  onReady: PropTypes.func\n};\nGoogleMap.defaultProps = {\n  options: {\n    center: {\n      lat: 40.730610,\n      lng: -73.935242\n    },\n    zoom: 12\n  },\n  onBoundsChange: function onBoundsChange() {},\n  onCenterChange: function onCenterChange() {},\n  onClick: function onClick() {},\n  onDoubleClick: function onDoubleClick() {},\n  onDrag: function onDrag() {},\n  onDragEnd: function onDragEnd() {},\n  onDragStart: function onDragStart() {},\n  onHeadingChange: function onHeadingChange() {},\n  onIdle: function onIdle() {},\n  onMapTypeIdChange: function onMapTypeIdChange() {},\n  onMouseMove: function onMouseMove() {},\n  onMouseOut: function onMouseOut() {},\n  onMouseOver: function onMouseOver() {},\n  onProjectionChange: function onProjectionChange() {},\n  onRightClick: function onRightClick() {},\n  onTilesLoad: function onTilesLoad() {},\n  onTiltChange: function onTiltChange() {},\n  onZoomChange: function onZoomChange() {},\n  onReady: function onReady() {}\n};\nexport default GoogleMap;","map":null,"metadata":{},"sourceType":"module"}