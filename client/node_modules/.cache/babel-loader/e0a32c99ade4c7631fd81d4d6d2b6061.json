{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Script from 'react-load-script';\n\nvar MarkerClusterer = function (_Component) {\n  _inherits(MarkerClusterer, _Component);\n\n  function MarkerClusterer(props) {\n    _classCallCheck(this, MarkerClusterer);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      scriptLoaded: false\n    };\n    _this.onScriptLoad = _this.onScriptLoad.bind(_this);\n    return _this;\n  }\n\n  MarkerClusterer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    this.renderMarkerClusterer(nextProps);\n  };\n\n  MarkerClusterer.prototype.componentWillUnmount = function componentWillUnmount() {\n    if (!this.markerClusterer) {\n      return;\n    }\n\n    this.markerClusterer.clearMarkers();\n  };\n\n  MarkerClusterer.prototype.onScriptLoad = function onScriptLoad() {\n    this.setState({\n      scriptLoaded: true\n    });\n    this.renderMarkerClusterer(this.props);\n  };\n\n  MarkerClusterer.prototype.renderMarkerClusterer = function renderMarkerClusterer(props) {\n    var map = props.map,\n        markers = props.markers;\n\n    if (!map) {\n      return;\n    }\n\n    if (!this.markerClusterer) {\n      this.markerClusterer = new MarkerClusterer(map, markers);\n      return;\n    }\n    /**\n     * @todo Review props and apply updates to this.markerClusterer. - Ryan\n     */\n\n  };\n\n  MarkerClusterer.prototype.render = function render() {\n    return React.createElement(Script, {\n      url: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js',\n      onLoad: this.onScriptLoad\n    });\n  };\n\n  return MarkerClusterer;\n}(Component);\n\nMarkerClusterer.propTypes = {\n  map: PropTypes.object,\n  markers: PropTypes.array,\n  options: PropTypes.object,\n  onReady: PropTypes.func\n};\nMarkerClusterer.defaultProps = {\n  markers: [],\n  options: {},\n  onReady: function onReady(markerClusterer) {}\n};\nexport default MarkerClusterer;","map":null,"metadata":{},"sourceType":"module"}