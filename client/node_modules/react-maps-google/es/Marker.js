var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';

var CALLBACK_MAP = {
  'animation_changed': 'onAnimationChange',
  'click': 'onClick',
  'clickable_changed': 'onClickableChange',
  'cursor_changed': 'onCursorChange',
  'dblclick': 'onDoubleClick',
  'drag': 'onDrag',
  'dragend': 'onDragEnd',
  'draggable_changed': 'onDraggableChange',
  'dragstart': 'onDragStart',
  'flat_changed': 'onFlatChange',
  'icon_changed': 'onIconChange',
  'mousedown': 'onMouseDown',
  'mouseout': 'onMouseOut',
  'mouseover': 'onMouseOver',
  'mouseup': 'onMouseUp',
  'position_changed': 'onPositionChange',
  'rightclick': 'onRightClick',
  'shape_changed': 'onShapeChange',
  'title_changed': 'onTitleChange',
  'visible_changed': 'onVisibleChange',
  'zindex_changed': 'onZIndexChange'
};

var Marker = function (_Component) {
  _inherits(Marker, _Component);

  function Marker() {
    _classCallCheck(this, Marker);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  Marker.prototype.componentDidMount = function componentDidMount() {
    if (this.props.map) {
      this.renderMarker(this.props);
    }
  };

  Marker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var renderMarker = false;

    if (nextProps.map !== this.props.map) {
      renderMarker = true;
    }

    if (!Object.is(nextProps.position, this.props.position)) {
      renderMarker = true;
    }

    if (!Object.is(nextProps.options, this.props.options)) {
      renderMarker = true;
    }

    if (renderMarker) {
      this.renderMarker(nextProps);
    }
  };

  Marker.prototype.componentWillUnmount = function componentWillUnmount() {
    if (!this.marker) {
      return;
    }

    google.maps.event.clearInstanceListeners(this.marker);
    this.marker.setMap(null);
  };

  Marker.prototype.onMarkerCallback = function onMarkerCallback(callback, event) {
    this.props[callback](this.marker, event);
  };

  Marker.prototype.renderMarker = function renderMarker(props) {
    var _this2 = this;

    var map = props.map,
        options = props.options,
        position = props.position,
        width = props.width,
        height = props.height;


    if (!map) {
      return;
    }

    if (!this.marker) {
      this.marker = new google.maps.Marker(_extends({
        map: map,
        position: position
      }, options));

      Object.keys(CALLBACK_MAP).forEach(function (key) {
        google.maps.event.addListener(_this2.marker, key, _this2.onMarkerCallback.bind(_this2, CALLBACK_MAP[key]));
      });
      return;
    }

    this.marker.setOptions(_extends({
      map: map,
      position: position
    }, options));
  };

  Marker.prototype.render = function render() {
    return null;
  };

  return Marker;
}(Component);

Marker.propTypes = {
  map: PropTypes.object,
  options: PropTypes.object,
  position: PropTypes.object.isRequired,
  onAnimationChange: PropTypes.func,
  onClick: PropTypes.func,
  onClickableChange: PropTypes.func,
  onCursorChange: PropTypes.func,
  onDoubleClick: PropTypes.func,
  onDrag: PropTypes.func,
  onDragEnd: PropTypes.func,
  onDraggableChange: PropTypes.func,
  onDragStart: PropTypes.func,
  onFlatChange: PropTypes.func,
  onIconChange: PropTypes.func,
  onMouseDown: PropTypes.func,
  onMouseOut: PropTypes.func,
  onMouseOver: PropTypes.func,
  onMouseUp: PropTypes.func,
  onPositionChange: PropTypes.func,
  onRightClick: PropTypes.func,
  onShapeChange: PropTypes.func,
  onTitleChange: PropTypes.func,
  onVisibleChange: PropTypes.func,
  onZIndexChange: PropTypes.func
};

Marker.defaultProps = {
  options: {},
  onAnimationChange: function onAnimationChange(marker) {},
  onClick: function onClick(marker, event) {},
  onClickableChange: function onClickableChange(marker) {},
  onCursorChange: function onCursorChange(marker) {},
  onDoubleClick: function onDoubleClick(marker, event) {},
  onDrag: function onDrag(marker, event) {},
  onDragEnd: function onDragEnd(marker, event) {},
  onDraggableChange: function onDraggableChange(marker) {},
  onDragStart: function onDragStart(marker, event) {},
  onFlatChange: function onFlatChange(marker) {},
  onIconChange: function onIconChange(marker) {},
  onMouseDown: function onMouseDown(marker, event) {},
  onMouseOut: function onMouseOut(marker, event) {},
  onMouseOver: function onMouseOver(marker, event) {},
  onMouseUp: function onMouseUp(marker, event) {},
  onPositionChange: function onPositionChange(marker) {},
  onRightClick: function onRightClick(marker, event) {},
  onShapeChange: function onShapeChange(marker) {},
  onTitleChange: function onTitleChange(marker) {},
  onVisibleChange: function onVisibleChange(marker) {},
  onZIndexChange: function onZIndexChange(marker) {}
};

export default Marker;