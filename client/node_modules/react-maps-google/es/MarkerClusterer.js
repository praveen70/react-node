function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Script from 'react-load-script';

var MarkerClusterer = function (_Component) {
  _inherits(MarkerClusterer, _Component);

  function MarkerClusterer(props) {
    _classCallCheck(this, MarkerClusterer);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.state = {
      scriptLoaded: false
    };

    _this.onScriptLoad = _this.onScriptLoad.bind(_this);
    return _this;
  }

  MarkerClusterer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    this.renderMarkerClusterer(nextProps);
  };

  MarkerClusterer.prototype.componentWillUnmount = function componentWillUnmount() {
    if (!this.markerClusterer) {
      return;
    }

    this.markerClusterer.clearMarkers();
  };

  MarkerClusterer.prototype.onScriptLoad = function onScriptLoad() {
    this.setState({
      scriptLoaded: true
    });

    this.renderMarkerClusterer(this.props);
  };

  MarkerClusterer.prototype.renderMarkerClusterer = function renderMarkerClusterer(props) {
    var map = props.map,
        markers = props.markers;


    if (!map) {
      return;
    }

    if (!this.markerClusterer) {
      this.markerClusterer = new MarkerClusterer(map, markers);
      return;
    }

    /**
     * @todo Review props and apply updates to this.markerClusterer. - Ryan
     */
  };

  MarkerClusterer.prototype.render = function render() {
    return React.createElement(Script, {
      url: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js',
      onLoad: this.onScriptLoad
    });
  };

  return MarkerClusterer;
}(Component);

MarkerClusterer.propTypes = {
  map: PropTypes.object,
  markers: PropTypes.array,
  options: PropTypes.object,
  onReady: PropTypes.func
};

MarkerClusterer.defaultProps = {
  markers: [],
  options: {},
  onReady: function onReady(markerClusterer) {}
};

export default MarkerClusterer;