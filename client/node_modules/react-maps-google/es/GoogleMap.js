var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';
import Script from 'react-load-script';
import cleanProps from 'clean-react-props';

var EXCLUDE_PROPS = ['onClick', 'onDoubleClick', 'onDrag', 'onDragEnd', 'onDragStart', 'onMouseMove', 'onMouseOut', 'onMouseOver'];

var CALLBACK_MAP = {
  'bounds_changed': 'onBoundsChange',
  'center_changed': 'onCenterChange',
  'click': 'onClick',
  'dblclick': 'onDoubleClick',
  'drag': 'onDrag',
  'dragend': 'onDragEnd',
  'dragstart': 'onDragStart',
  'heading_changed': 'onHeadingChange',
  'idle': 'onIdle',
  'maptypeid_change': 'onMapTypeIdChange',
  'mousemove': 'onMouseMove',
  'mouseout': 'onMouseOut',
  'mouseover': 'onMouseOver',
  'projection_changed': 'onProjectionChange',
  'rightclick': 'onRightClick',
  'tilesloaded': 'onTilesLoad',
  'tilt_changed': 'onTiltChange',
  'zoom_changed': 'onZoomChange'
};

window['reactMapsGoogleInstances'] = [];
window['reactMapsGoogleInit'] = function () {
  window['reactMapsGoogleInstances'].forEach(function (instance) {
    return instance();
  });
};

var GoogleMap = function (_Component) {
  _inherits(GoogleMap, _Component);

  function GoogleMap(props) {
    _classCallCheck(this, GoogleMap);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    var scriptLoaded = window.google && window.google.maps && window.google.maps.Map ? true : false;

    _this.state = {
      map: null,
      scriptLoaded: scriptLoaded
    };

    _this.onScriptLoad = _this.onScriptLoad.bind(_this);
    _this.onScriptInit = _this.onScriptInit.bind(_this);

    window['reactMapsGoogleInstances'].push(_this.onScriptInit);
    return _this;
  }

  GoogleMap.prototype.componentDidMount = function componentDidMount() {
    this.renderMap();
  };

  GoogleMap.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    this.refreshMapSettings(nextProps);
  };

  GoogleMap.prototype.componentWillUnmount = function componentWillUnmount() {
    var map = this.state.map;


    if (!map) {
      return;
    }

    google.maps.event.clearInstanceListeners(map);
  };

  GoogleMap.prototype.refreshMapSettings = function refreshMapSettings(props) {
    var map = this.state.map;


    if (!map) {
      return;
    }

    var options = props.options;


    map.setOptions(options);
  };

  GoogleMap.prototype.onScriptLoad = function onScriptLoad() {
    this.setState({
      scriptLoaded: true
    });
  };

  GoogleMap.prototype.onScriptInit = function onScriptInit() {
    this.renderMap();
  };

  GoogleMap.prototype.onMapCallback = function onMapCallback(callback, event) {
    var map = this.state.map;


    this.props[callback](map, event);
  };

  GoogleMap.prototype.renderMap = function renderMap() {
    var _this2 = this;

    if (this.state.map) {
      return false;
    }

    if (!window.google || !window.google.maps || !window.google.maps.Map) {
      return false;
    }

    var _props = this.props,
        options = _props.options,
        onReady = _props.onReady;


    var mapElement = ReactDOM.findDOMNode(this.mapRef);

    if (!mapElement) {
      return false;
    }

    var map = new google.maps.Map(mapElement, options);

    Object.keys(CALLBACK_MAP).forEach(function (key) {
      google.maps.event.addListener(map, key, _this2.onMapCallback.bind(_this2, CALLBACK_MAP[key]));
    });

    this.setState({
      map: map
    });

    onReady(map);
    return true;
  };

  GoogleMap.prototype.render = function render() {
    var _this3 = this;

    var _props2 = this.props,
        apiKey = _props2.apiKey,
        children = _props2.children;
    var _state = this.state,
        map = _state.map,
        scriptLoaded = _state.scriptLoaded;


    var clonedChildren = React.Children.toArray(children).map(function (child) {
      return React.cloneElement(child, {
        map: map
      });
    });

    return React.createElement(
      React.Fragment,
      null,
      scriptLoaded === false && React.createElement(Script, {
        url: 'https://maps.googleapis.com/maps/api/js?key=' + apiKey + '&callback=reactMapsGoogleInit',
        onLoad: this.onScriptLoad
      }),
      React.createElement('div', _extends({}, cleanProps(this.props, EXCLUDE_PROPS), {
        ref: function ref(element) {
          return _this3.mapRef = element;
        },
        style: { height: '100%' }
      })),
      clonedChildren
    );
  };

  return GoogleMap;
}(Component);

GoogleMap.propTypes = {
  apiKey: PropTypes.string.isRequired,
  options: PropTypes.object,
  onBoundsChange: PropTypes.func,
  onCenterChange: PropTypes.func,
  onClick: PropTypes.func,
  onDoubleClick: PropTypes.func,
  onDrag: PropTypes.func,
  onDragEnd: PropTypes.func,
  onDragStart: PropTypes.func,
  onHeadingChange: PropTypes.func,
  onIdle: PropTypes.func,
  onMapTypeIdChange: PropTypes.func,
  onMouseMove: PropTypes.func,
  onMouseOut: PropTypes.func,
  onMouseOver: PropTypes.func,
  onProjectionChange: PropTypes.func,
  onRightClick: PropTypes.func,
  onTilesLoad: PropTypes.func,
  onTiltChange: PropTypes.func,
  onZoomChange: PropTypes.func,
  onReady: PropTypes.func
};

GoogleMap.defaultProps = {
  options: {
    center: {
      lat: 40.730610,
      lng: -73.935242
    },
    zoom: 12
  },
  onBoundsChange: function onBoundsChange() {},
  onCenterChange: function onCenterChange() {},
  onClick: function onClick() {},
  onDoubleClick: function onDoubleClick() {},
  onDrag: function onDrag() {},
  onDragEnd: function onDragEnd() {},
  onDragStart: function onDragStart() {},
  onHeadingChange: function onHeadingChange() {},
  onIdle: function onIdle() {},
  onMapTypeIdChange: function onMapTypeIdChange() {},
  onMouseMove: function onMouseMove() {},
  onMouseOut: function onMouseOut() {},
  onMouseOver: function onMouseOver() {},
  onProjectionChange: function onProjectionChange() {},
  onRightClick: function onRightClick() {},
  onTilesLoad: function onTilesLoad() {},
  onTiltChange: function onTiltChange() {},
  onZoomChange: function onZoomChange() {},
  onReady: function onReady() {}
};

export default GoogleMap;